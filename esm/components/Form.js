function _templateObject3(){var data=babelHelpers.taggedTemplateLiteral(["\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  opacity: "," !important;\n  transition: opacity ease 0.2s;\n  pointer-events: ",";\n\n  i {\n    color: ",";\n  }\n"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=babelHelpers.taggedTemplateLiteral(["\n          & > * {\n            opacity: 0;\n            transition: ease 0.2s;\n          }\n        "]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=babelHelpers.taggedTemplateLiteral(["\n  position: relative;\n  /*\n  We don't want to mess any component opacity when loading === false,\n  considering that there might be elements with opacity = 0.2 we only\n  load the opacity rule when loading === true\n  */\n  ","\n"]);_templateObject=function _templateObject(){return data;};return data;}import React from'react';import{css,styled}from'../style/emotion';/**
 * Automatically hides children when `loading === true`, also allows the
 * usage of `<Loading/>` Component inside it.
 */export var GUForm=styled.form(_templateObject(),function(p){return p.loading?css(_templateObject2()):'';});var _GULoading=styled.div(_templateObject3(),function(p){return p.loading?1:0;},function(p){return p.loading?'all':'none';},function(p){return p.theme.color.ink.main;});/**
 * Can be used as the last child of a `<Form />` element to automatically
 * create a loading indicator.
 */export var GULoading=function GULoading(_ref){var loading=_ref.loading,className=_ref.className;return/*#__PURE__*/React.createElement(_GULoading,{loading:loading,className:className},/*#__PURE__*/React.createElement("i",{className:"fa fa-loading fa-spin"}));};